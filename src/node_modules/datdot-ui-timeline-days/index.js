const debug = require('debug')
const bel = require('bel')
const csjs = require('csjs-inject')
const { format, getDaysInMonth, isToday } = require('date-fns')

module.exports = datdot_ui_calendar_days

function datdot_ui_calendar_days(opts) {
    const { data, style, protocol } = opts
    const ui = 'datdot-ui-timeline-days'
    const date = new Date()
    
    const obj = {
        count: parseInt( format(date, 'M') ),
        month: format(date, 'MMMM'),
        year: parseInt( format(date, 'yyyy') ),
    }

    if ( data === null ) {
        var count = count = parseInt( format(date, 'M') )
        var month = format(date, 'MMMM')
        var year = parseInt( format(date, 'yyyy') )
        var days = getDaysInMonth(year, count) 
        console.log('no data', count, month, year, days );

    } else {
        console.log('data', data)
        var { from, flow, count, month, year, days } = data
    }


    const today = (d) => isToday(new Date(year, count-1, d) ) 
    const el = bel`<section class=${style}></section>`
    const log = debug(ui)

    for (let day = 1; day <= days; day++ ) {
        let numbers = bel`<div class="${css['timeline-day']} ${today(day) ? css.today : ''}" data-day="${day}" onclick=${() => getDay(numbers)}>${day}</div>`
        el.append(numbers)
    }
    
    return el

    function getDay(el) {
        const value = parseInt(el.dataset.day)
        const message = { from: from ? from : ui, flow: flow ? flow : ui, type: 'click', body: value, count, month, year, days }
        const logger = log.extend(`day> ${message.body}`)

        el.classList.add(css.current)

        logger('send', message)

        return protocol(message)
    }
}

const css = csjs`
.timeline-day {
    text-align: center;
    padding: 8px;
    cursor: pointer;
}
.today {
    color: #fff;
    background-color: #000;
}
.current {
    color: #fff;
    background-color: blue;
}
`