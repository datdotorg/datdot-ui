const debug = require('debug')
const bel = require('bel')
const csjs = require('csjs-inject')
const { format, getDay, getDate, getMonth, getYear, getDaysInMonth, isToday, isBefore, isAfter, isSameDay } = require('date-fns')

module.exports = datdot_ui_calendar_days

function datdot_ui_calendar_days({name, mode, type, status, style, data = null, selectedDates, startDate, endDate}, protocol) {
    // init
    const ui = 'ui-calendar-days'
    const log = debug(ui)
    const date = new Date()
    const today = getDate(date)
    const logger = log.extend(`${name}`)

    if (mode === 'datepicker-range-days') {
        var send = protocol(receive)
        send( {from: name, type: 'init' } )
    }

    let start, end
    if ( data === null ) {
        // if no data
        var count = getMonth(date) // initial month
        var month = format(date, 'MMMM') // get capitalization month
        var year = getYear(date) // initial year
        var days = getDaysInMonth(date) // initial days
    } else {
        // if data is loaded
        var { from, flow, count, month, year, days } = data
    }

    const is_today = (d) => isToday(new Date(year, count, d)) 

    // element
    const el = bel`<section role="calendar-days" class=${style}></section>`

    getSpaceInPrevMonth()
    makeCalendar()

    const buttons = [...el.children]

    el.onmousemove  = onmousemove
    el.onmouseleave = onmouseleave
    el.onmouseenter = onmouseenter

    // if ( startDate !== void 0 ) console.log(`mode: ${mode}, type: ${type}, status: ${status}, selectRangeDates: ${startDate.date} => ${endDate.date}`);

    return el

    function receive( message ) {
        log(`${name} received`, message )
        const { type, body } = message
        if ( status === 'start-select-by-other') return 
    }


    function setStatus(nextStatus) {
        status = nextStatus
    }

    function selectOneDay(target, date) {
        const message = { from: from ? from : ui, flow: ui, type: 'click', body: date, count, month, year, days }
        const logger = log.extend(`day> ${message.body}`)
        const children = [...el.children]
        children.forEach( btn => {
            btn.classList.remove(css['date-selected'])
            btn.removeAttribute('aira-selected')
        })
        target.classList.add(css['date-selected'])
        target.setAttribute('aria-selected', true)

        logger('send', message)
        
        return protocol(message)
    }

    function multipleDays(target, date) {
        const message = { from: from ? from : ui, flow: ui, type: 'click', body: date, count, month, year, days }
        const logger = log.extend(`day> ${message.body}`)
        if (target.classList.contains(css['date-selected'])) {
            target.setAttribute('aria-selected', false)
        } else {
            target.setAttribute('aria-selected', true)
        }
        target.classList.toggle(css['date-selected'])
        logger('send', message)
        return protocol(message)
    }

    function selectRangeDays(target, date) {
        if ( status === 'unselected') {
            start = date
            setStatus('start-select')
            type = 'value/start'
            // console.log('frist clicked', start, '->', end);
        } else if ( status === 'start-select') {
            end = date
            setStatus('end-select')
            type = 'value/end'
        } else if ( status === 'end-select') {
            start = date
            end = void 0
            setStatus('start-select')
            // console.log('first clicked', start, '->', end)
        } else if ( status === 'start-select-by-other') {
            end = date
            setStatus('end-select')
            type = 'value/end'
        } else if ( status === 'end-select-by-other' ) {
            end = date
            setStatus('start-select')
        }
        
        if (status === 'start-select') {
            buttons.map( btn => {
                btn.classList.remove(css['date-selected'])
                btn.classList.remove(css['date-in-range'])
                btn.removeAttribute('aira-selected')
            })
        }

        target.setAttribute('aria-selected', true)
        target.classList.add(css['date-selected'])

        const message = { sender: name, flow: ui, currentStatus: status, type, body: date, day: target.dataset.number, count, month, year }
        const logger = log.extend(`day> ${message.body}`)
        logger('send', message)

        return send( message )
    }

    function onmouseenter(event) {
        let storage = window.sessionStorage
        let datepicker = JSON.parse(storage.getItem('datepicker'))
        setStatus( datepicker.status )
        if (status === 'unselected') return
        // from calendar self
        if (status === 'start-select') return
        if (status === 'end-select') return
        // from other calendar
        if (status === 'start-select-by-other') return selectSecond(datepicker)
        if (status === 'end-select-by-other') return
        if (status === 'end-selecting-by-other') return
    }

    function selectSecond(datepicker) {
        let from = datepicker.startDate.from
        if ( from === name ) return setStatus('start-select')
    }

    function onmouseleave(event) {
        let storage = window.sessionStorage
        let datepicker = JSON.parse(storage.getItem('datepicker'))
        setStatus( datepicker.status )
        if (status === 'unselected') return
        // from calendar self
        if (status === 'start-select') return onlyKeepFirst()
        if (status === 'end-select') return
        // from other calendar
        if (status === 'start-select-by-other') return onlyKeepFirst()
        if (status === 'end-select-by-other') return
    }

    function onlyKeepFirst() {
        buttons.map( btn => { 
            btn.dataset.date !== startDate ? btn.classList.remove(css['date-in-range']) : null
        })
        setStatus('start-select-by-other')
        return send({sender: name, status, type: 'selecting-second'})
    }

    function onmousemove(event) {
        // console.log('start', start, 'startDate', startDate)
        const btn = event.target
        const current = btn.dataset.date
        // console.log(current);
        if (!current) return
        if (status === 'unselected') return
        // from calendar self
        if (status === 'start-select') return markRange(btn, start, current)
        if (status === 'end-select') return 
        // from other calendar
        if (status === 'start-select-by-other') return markAllCalendars(current)
    }

    function markAllCalendars(current) {
        let storage = window.sessionStorage
        let datepicker = JSON.parse(storage.getItem('datepicker'))
        let start = datepicker.startDate.date.split('-')
        let end = current.split('-')
        let startYear = parseInt(start[0] )
        let startMonth = parseInt(start[1])
        let endYear = parseInt(end[0])
        let endMonth = parseInt(end[1])
        let number = parseInt(end[2])

        if (startYear < endYear) return colorRange(0, number)
        else if ( startYear > endYear) return colorRange(number, days+1)
        else if (startMonth > endMonth) return colorRange(number, days+1)
        else if (startMonth < endMonth) return colorRange(0, number)
    }
    

    function markRange(btn, start, current) {
        if ( startDate !== void 0 && start === void 0) {
            start = startDate.date
        }
        let select1 = parseInt(start.split('-')[2])
        let select2 = parseInt(current.split('-')[2])
        if (select1 < select2 ) colorRange(select1, select2)
        else colorRange(select2, select1)
    }

    function colorRange(first, second) {
        // console.log( first, second);
        return buttons.map( btn => {
            let number = btn.dataset.number
            if (number < first) btn.classList.remove(css['date-in-range'])
            if (number === first) btn.classList.add(css['date-selected'])
            if (number > first) btn.classList.add(css['date-in-range'])
            if (number > second - 1 ) btn.classList.remove(css['date-in-range'])
        })
    }

    function onclick(target, date) {
        if (mode === 'datepicker-multiple-days') multipleDays(target, date)
        else if (mode === 'datepicker-range-days') selectRangeDays(target, date)
        else selectOneDay(target, date)
        logger('date selected', date)
    }

    function getSpaceInPrevMonth() {
        // get days in previous month
        var daysInPrevMonth = getDaysInMonth(new Date(year, count - 1))
        // get day in prev month which means to add how many spans
        var dayInPrevMonth = getDay(new Date(year, count-1, daysInPrevMonth))
        // generate span for prev month
        for (let s = dayInPrevMonth; s > 0; s-- ) {
            let span = bel`<div class=${css['day-prev']} role="presentation" aria-label aria-disabled="false"></div>`
            // span.classList.add(css['day-prev'])
            el.append(span)
        }
    }

    function makeCalendar() {
        for (let d = 1; d <= days; d++ ) {
            let date = format(new Date(year, count, d), 'd MMMM yyyy, EEEE')
            let setDate = format(new Date(year, count, d), 'yyyy-M-d')
            
            if (d < today && count <= new Date().getMonth() && year <= new Date().getFullYear() ) {
                var day = bel`<div role="button" class="${css['calendar-day']} ${css['disabled-day']}" tabindex="-1" aria-today=${is_today(d)} aria-label="${date}" data-date="${setDate}">${d}</div>`
            } else if ( count < new Date().getMonth() && year <= new Date().getFullYear() ) {
                var day = bel`<div role="button" class="${css['calendar-day']} ${css['disabled-day']}" tabindex="-1" aria-today=${is_today(d)} aria-label="${date}" data-date="${setDate}">${d}</div>`
            } else if ( year < new Date().getFullYear()) {
                var day = bel`<div role="button" class="${css['calendar-day']} ${css['disabled-day']}" tabindex="-1" aria-today=${is_today(d)} aria-label="${date}" data-date="${setDate}">${d}</div>`
            }
             else {
                var day = bel`<div role="button" class="${css['calendar-day']} ${is_today(d) ? `${css.today}` : ''}" tabindex="-1" aria-today=${is_today(d)} aria-label="${date}" aria-selected="${is_today(d)}" data-date="${setDate}" data-number="${d}" onclick=${(el) => onclick( el.target, setDate )}>${d}</div>`
            }

            if (selectedDates !== void 0 && selectedDates.length > 0) {
                selectedDates.map( date => {
                    if ( date === setDate ) {
                        day.setAttribute('aria-selected', true)
                        day.classList.add(css['date-selected'])
                    }
                })
            }

            if (startDate !== void 0) {
                if ( startDate.date === setDate) {
                    day.setAttribute('aria-selected', true)
                    day.classList.add(css['date-selected'])
                }
            }

            if (endDate !== void 0) {
                if ( endDate.date === setDate) {
                    day.setAttribute('aria-selected', true)
                    day.classList.add(css['date-selected'])
                }

                // if select startDate is starting after current date then add style and attribute
                if (isAfter(new Date( endDate.year, endDate.count, endDate.day), new Date(year, count, d))) {
                        day.setAttribute('aria-selected', true)
                        day.classList.add(css['date-in-range'])
                        
                    // if select startDate is starting after current date then add style and attribute
                    if ( isAfter(new Date(year, count, d), new Date(startDate.year, startDate.count, startDate.day) )) {
                        day.setAttribute('aria-selected', true)
                        day.classList.add(css['date-in-range'])
                    } else {
                        day.setAttribute('aria-selected', false)
                        day.classList.remove(css['date-in-range'])
                    }
                } 
            }
            
            el.append(day)
        }
    }
}

const css = csjs`
.calendar-day {
    display: grid;
    align-items: center;
    justify-content: center;
    width: 30px;
    height: 30px;
    cursor: pointer;
    transition: color 0.25s, background-color 0.25s ease-in-out;
}
.calendar-day:focus, .calendar-day:active {
    outline: dotted 1px #c9c9c9;
}
.calendar-day:hover {
    color: #fff;
    background-color: #000;
}
.today {
    background-color: #f2f2f2;
}
.date-selected, .date-selected:hover {
    color: #fff;
    background-color: #000;
}
.date-in-range {
    color: #000;
    background-color: #EAEAEA;
}
.disabled-day {
    color: #BBBBBB;
    cursor: default;
}
.disabled-day:hover {
    color: #BBBBBB;
    background: none;
}
.day-prev {}
`