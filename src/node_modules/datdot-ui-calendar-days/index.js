const bel = require('bel')
const csjs = require('csjs-inject')
const debug = require('debug')
const { isToday, format, isBefore, isAfter, isPast, getDay, getDate, getMonth, getYear, getDaysInMonth } = require('date-fns')

module.exports = calendarDays

function calendarDays({ name = 'ui-calendar-days', month, days, year, status = 'cleared'}, protocol) {
    const log = debug(name)
    // @TODO: what is the real name?
    // * is it 'ui-calendar-days' ?
    // * or is it 'calendar' ?
    // * or is it maybe: 'calendar/ui-calendar-days' ???
    const sendToParent = protocol( receive )
    sendToParent({ from: name, type: 'init' })
    
    const calendar = makeDays(days)
    const buttons = [...calendar.children]

    calendar.onmousemove = onmousemove
    calendar.onclick = onclick
    calendar.onmouseleave = onmouseleave
    calendar.onmouseenter = onmouseenter

    return calendar
    
    function receive( message ) { 
        const {body, type} = message
        log('msg from datepicker', message)
        if (type === 'clear') return actionClear()
        if (type === 'selecting-second') return actionSelectingSecond(body)
        if (type === 'not-selecting-second') return actionKeepFirst(body)
        if (type === 'first-selected-by-startcal') return setStatus('first-selected-by-startcal')
        if (type === 'first-selected-by-endcal') return setStatus('first-selected-by-endcal')
        if (type === 'second-selected') return setStatus('second-selected-by-other')
        if (type === 'color-from-start') return actionColorFromStart()
        if (type === 'color-to-end') return actionColorToEnd()
    }
    
    function actionSelectingSecond(body) {
        colorRange(0, first)
    }

    function actionKeepFirst(body) {
        onlyKeepFirst()
    }

    function actionColorToEnd() {
        colorRange(first, days + 1)
    }

    function actionColorFromStart() {
        colorRange(0, first)
    }

    function actionClear() {
        clearSelf()
    }

    function setStatus( nextStatus ) {
        log('setStatus', JSON.stringify({ from: status, type: 'status', body: nextStatus}, 0, 2))
        status = nextStatus
        // sendToParent({from: name, type: 'status', body: nextStatus} )
    }

    function clearSelf() {
        buttons.map( btn => {
            btn.classList.remove(css['date-in-range'])
            btn.classList.remove(css['date-selected'])
        })
        first = second = void 0
    }

    function clearAndNotify() {
        clearSelf()
        return sendToParent({from: name, type: 'not-selecting-second', body: ''})
    }

    function notifyOther() {
        log('notifyOther')
        return sendToParent({from: name, type: 'selecting-second'})
    }

    function onlyKeepFirst() {
        buttons.map( btn => {
            const num = parseInt(btn.dataset.num)
            if ( num !== first) {
                btn.classList.remove(css['date-in-range'])
                btn.classList.remove(css['date-selected'])
            }
        })
    }

    function onmouseenter(event) {
        log('onmouseenter', {from: name, status})
        if (status === 'cleared') return
        if (status === 'first-selected-by-self') return
        if (status === 'first-selected-by-startcal') return notifyOther()
        if (status === 'first-selected-by-endcal') return notifyOther()
        if (status === 'second-selected-by-self') return
        if (status === 'second-selected-by-other') return
    }

    function onmouseleave(event) {
        log('onmouseleave', {from: name, status})
        if (status === 'cleared') return
        if (status === 'first-selected-by-self') return onlyKeepFirst()
        if (status === 'first-selected-by-startcal') return clearAndNotify()
        if (status === 'first-selected-by-endcal') return clearAndNotify()
        if (status === 'second-selected-by-self') return
        if (status === 'second-selected-by-other') return
    }

    function onmousemove(event) {
        const btn = event.target
        const current = parseInt(btn.dataset.num)
        if (!current || btn.classList.contains(css["disabled-day"])) return
        if (status === 'cleared') return
        if (status === 'first-selected-by-self') return markRange(btn, first, current)
        if (status === 'first-selected-by-startcal') return markRange(btn, 0, current)
        if (status === 'first-selected-by-endcal') return markRange(btn, first, current)
        if (status === 'second-selected-by-self') return
        if (status === 'second-selected-by-other') return
    }

    function onclick(event) {
        const btn = event.target
        const current = parseInt(btn.dataset.num)
        log('clicked', name)
        if (!current || btn.classList.contains(css["disabled-day"])) return
        if (status === 'cleared') return selectFirst(btn, current)
        if (status === 'first-selected-by-self') return selectSecond(btn, current)
        if (status === 'first-selected-by-startcal') return selectSecond(btn, current)
        if (status === 'first-selected-by-endcal') return selectSecond(btn, current)
        if (status === 'second-selected-by-self') return selectFirst(btn, current)
        if (status === 'second-selected-by-other') return selectFirst(btn, current)
    }

    function selectSecond(btn, current) {
        second = current
        setStatus('second-selected-by-self')
        sendToParent({from: name, type: 'second-selected'})
        return sendToParent({from: name, type: 'value/second', body: [month, second, year] })
    }

    function clearSelf() {
        for (var i = 0; i < buttons.length; i++) {
            buttons[i].classList.remove(css['date-selected'])
        }
        first = second = void 0
    }

    function selectFirst(btn, current) {
        clearSelf()
        sendToParent({from: name, type: 'cleared'})
        first = current
        btn.classList.add(css['date-selected'])
        setStatus('first-selected-by-self')
        return sendToParent({from: name, type: 'value/first', body: [month, first, year] })
    }

    function markRange(btn, A, B) {
        if (A === B) return onlyKeepFirst()
        if (A < B) colorRange(A, B)
        else colorRange(B, A)
    }

    function colorRange(first, second) {
        buttons.map( btn => {
            let current = parseInt(btn.dataset.num)
            if (!current || btn.classList.contains(css["disabled-day"])) return
            if (current <= first) {
                btn.classList.remove(css['date-selected'])
                btn.classList.remove(css['date-in-range'])
            } 
            if (current === first ) { 
                btn.classList.add(css['date-selected'])
            }
            if (current > first) {
                btn.classList.add(css['date-in-range'])
            }
            if (current === second) {
                btn.classList.add(css['date-selected'])
            }
            if (current > second - 1) {
                btn.classList.remove(css['date-in-range'])
            }
            if (current > second) {
                btn.classList.remove(css['date-selected'])
                btn.classList.remove(css['date-in-range'])
            }
        })
    }

    function makeDays(days) {
        const el = bel`<section role="calendar-days" class=${css["calendar-days"]}></section>`
        // make space for week
        getSpaceInPrevMonth(el)

        for (let i = 1; i < days + 1; i++) {
            let formatDate = format(new Date(year, month, i), 'd MMMM yyyy, EEEE')
            let setDate = format(new Date(year, month, i), 'yyyy-MM-d')
            let btn = bel`<button role="button" aria-selected="false" tabindex="-1" data-num="${i}" aria-label="${formatDate}" data-date="${setDate}">${i}</button>`
            if ( isToday(new Date(year, month, i)) ) {
                btn.classList.add(css.today)
                btn.setAttribute('aria-today', true)
            } 
            else { 
                btn.classList.add(css.day)
                if ( isPast(new Date(year, month, i)) ) btn.classList.add(css["disabled-day"])
                btn.setAttribute('aria-today', false)
            }
            el.append(btn)
        }
        
        return el
    }

    function getSpaceInPrevMonth(el) {
        // get days in previous month
        let daysInPrevMonth = getDaysInMonth(new Date(year, month-1))
        // get day in prev month which means to add how many spans
        let dayInPrevMonth = getDay(new Date(year, month-1, daysInPrevMonth))
        for (let s = dayInPrevMonth; s > 0; s--) {
            let span = bel`<div class=${css['day-prev']} role="presentation" aria-label aria-disabled="false"></div>`
            el.append((span))
        }
    }


}

const css = csjs`
.calendar-days {
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: repeat(7, minmax(30px, auto));
    justify-items: center;
}
button {
    background: none;
    border: none;
    cursor: pointer;
}
.day {
    display: grid;
    align-items: center;
    justify-content: center;
    width: 30px;
    height: 30px;
    cursor: pointer;
    transition: color 0.25s, background-color 0.25s ease-in-out;
}
.day:hover {
    color: #fff;
    background-color: #000;
}
.today {
    background-color: #f2f2f2;
}
.date-selected, .date-selected:hover {
    color: #fff;
    background-color: #000;
}
.day-prev {}
.disabled-day, .disabled-day:hover {
    color: #BBBBBB;
    background: none;
    cursor: default;
}
.date-in-range {
    color: #000;
    background-color: #EAEAEA;
}
`