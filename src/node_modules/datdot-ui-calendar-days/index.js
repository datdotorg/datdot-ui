const debug = require('debug')
const bel = require('bel')
const csjs = require('csjs-inject')
const { format, getDay, getDate, getMonth, getYear, getDaysInMonth, isToday, isBefore, isAfter, isSameDay } = require('date-fns')

module.exports = datdot_ui_calendar_days

function datdot_ui_calendar_days({name, mode, type, status, style, data = null, selectedDates, startDate, endDate}, protocol) {
    // init
    const ui = 'ui-calendar-days'
    const log = debug(ui)
    const date = new Date()
    const today = getDate(date)
    const logger = log.extend(`${name}`)
    const send = protocol( receive )
    send( {from: name, type } )
    let first, second
    

    if ( data === null ) {
        // if no data
        var count = getMonth(date) // initial month
        var month = format(date, 'MMMM') // get capitalization month
        var year = getYear(date) // initial year
        var days = getDaysInMonth(date) // initial days
    } else {
        // if data is loaded
        var { from, flow, count, month, year, days } = data
    }

    const is_today = (d) => isToday(new Date(year, count, d)) 

    // element
    const el = bel`<section role="calendar-days" class=${style}></section>`

    getSpaceInPrevMonth()
    makeCalendar()

    const buttons = [...el.children]

    el.onmousemove  = onmousemove
    el.onmouseleave = onmouseleave
    el.onmouseenter = onmouseenter
    el.onclick = onclick

    // if ( startDate !== void 0 ) console.log(`mode: ${mode}, type: ${type}, status: ${status}, selectRangeDates: ${startDate.date} => ${endDate.date}`);

    return el

    function receive( message ) {
        const { type, body } = message
        log(message)
        if (type === 'clear') return actionClear(body)
        if (type === 'selecting-second') return actionSelectingSecond(body)
        if (type === 'not-selecting-second') return actionKeepFirst(body)
        if (type === 'first-selected-by-endcal') return setStatus('first-selected-by-endcal')
        if (type === 'first-selected-by-startcal') return setStatus('first-selected-by-startcal')
        if (type === 'second-selected') return setStatus('second-selected-by-other')
        if (type === 'color-from-start') return actionColorFromStart()
        if (type === 'color-to-end') return actionColorToEnd()
    }

    function actionColorFromStart () { colorRange(0, first) }
    function actionColorToEnd () { colorRange(first, days + 1) }
    function actionKeepFirst (body) { onlyKeepFirst() }
    function actionSelectingSecond (body) { colorRange(0, first) }
    function actionClear (body) { clearSelf() }

    function clearSelf () {
        for (var i = 0; i < buttons.length; i++) {
            buttons[i].classList.remove(css['date-selected'])
            buttons[i].classList.remove(css['date-in-range'])
        } 
        first = second = void 0
      }

    function setStatus(nextStatus) {
        status = nextStatus
    }

    function selectOneDay(target, date) {
        const message = { from: from ? from : ui, flow: ui, type: 'click', body: date, count, month, year, days }
        const logger = log.extend(`day> ${message.body}`)
        const children = [...el.children]
        children.forEach( btn => {
            btn.classList.remove(css['date-selected'])
            btn.removeAttribute('aira-selected')
        })
        target.classList.add(css['date-selected'])
        target.setAttribute('aria-selected', true)

        logger('send', message)
        
        return send(message)
    }

    function multipleDays(target, date) {
        const message = { from: from ? from : ui, flow: ui, type: 'click', body: date, count, month, year, days }
        const logger = log.extend(`day> ${message.body}`)
        if (target.classList.contains(css['date-selected'])) {
            target.setAttribute('aria-selected', false)
        } else {
            target.setAttribute('aria-selected', true)
        }
        target.classList.toggle(css['date-selected'])
        logger('send', message)
        return send(message)
    }

    function selectRangeDays(btn, date) {
        const current = parseInt(btn.dataset.number)
        if (btn.getAttribute('role') !== 'button') return
        if (status === 'cleared') return selectFirst(btn, current)
        if (status === 'first-selected-by-self') return selectSecond(btn, current)
        if (status === 'first-selected-by-startcal') return selectSecond(btn, current)
        if (status === 'first-selected-by-endcal') return selectSecond(btn, current)
        if (status === 'second-selected-by-self') return selectFirst(btn, current)
        if (status === 'second-selected-by-other') return selectFirst(btn, current)
    }

    function selectSecond(btn, current) {
        const logger = log.extend('select')
        second = current
        endDate = btn.dataset.date
        btn.classList.add(css['date-selected'])
        btn.setAttribute('aria-selected', true)
        setStatus('second-selected-by-self')
        log('second select', name, second, endDate);
        logger(`from: ${startDate} to ${endDate}`)
        send({ from: name, type: 'second-selected' })
        return send({ from: name, type: 'value/second', body: second })
    }

    function selectFirst(btn, current) {
        clearSelf()
        send({ from: name, type: 'cleared' }) // send notification
        first = current
        startDate = btn.dataset.date
        log('first select', name, first, startDate);
        btn.classList.add(css['date-selected'])
        btn.setAttribute('aria-selected', true)
        setStatus('first-selected-by-self')
        return send({ from: name, type: 'value/first', body: first })
      }

    function onmouseenter(event) {
        if (status === 'cleared') return
        if (status === 'first-selected-by-self') return
        if (status === 'first-selected-by-startcal') return notifyOther()
        if (status === 'first-selected-by-endcal') return notifyOther()
        if (status === 'second-selected-by-self') return
        if (status === 'second-selected-by-other') return
    }

    function notifyOther() {
        log("notifyOtehr: selecting-second", name);
        return send({ from: name, type: 'selecting-second' })
      }

    function onmouseleave(event) {
        if (status === 'cleared') return
        if (status === 'first-selected-by-self') return onlyKeepFirst()
        if (status === 'first-selected-by-startcal') return clearAndNotify()
        if (status === 'first-selected-by-endcal') return clearAndNotify()
        if (status === 'second-selected-by-self') return
        if (status === 'second-selected-by-self-by-other') return
    }

    function clearAndNotify() {
        clearSelf()
        return send({from: name, status, type: 'not-selecting-second', body: ''})
    }
    function onlyKeepFirst() {
        buttons.map( btn => { 
            if (parseInt(btn.dataset.number) == first) 
                btn.classList.add(css['date-selected'])
            else {
                btn.classList.remove(css['date-selected'])
                btn.classList.remove(css['date-in-range'])
            }
        })
        // setStatus('first-selected-by-self-by-other')
        // return send({from: name, status, type: 'selecting-second'})
    }

    function onmousemove(event) {
        const btn = event.target
        const current = parseInt(btn.dataset.number)
        
        if (btn.getAttribute('role') !=  'button') return
        if (status === 'cleared') return
        if (status === 'first-selected-by-self') return markRange(btn, first, current)
        if (status === 'second-selected-by-self') return 
        if (status === 'second-selected-by-other') return
        if (status === 'first-selected-by-startcal')return markRange(btn, 0, current)
        if (status === 'first-selected-by-endcal')return markRange(btn, current, days + 1)
    }
    
    function markRange (btn, A, B) {
        if (A === B) return onlyKeepFirst()
        if (A < B) colorRange(A, B)
        else colorRange(B, A)
      }

    function colorRange(first, second) {
        // log( first, second );
        return buttons.forEach( btn => {
            let number = parseInt(btn.dataset.number)
            if (number < first) {
                btn.classList.remove(css['date-in-range'])
                btn.classList.remove(css['date-selected'])
            }
            if (number === first) btn.classList.add(css['date-selected'])
            if (number > first) btn.classList.add(css['date-in-range'])
            if (number === second) btn.classList.add(css['date-selected'])
            if (number > second - 1 ) {
                btn.classList.remove(css['date-in-range']) 
            }
            if (number > second) {
                btn.classList.remove(css['date-selected'])
            }
        })
    }

    // function onclick(target, date) {
    //     if (mode === 'datepicker-multiple-days') multipleDays(target, date)
    //     else if (mode === 'datepicker-range-days') selectRangeDays(target, date)
    //     else selectOneDay(target, date)
    // }

    function onclick(event) {
        const btn = event.target
        const current = parseInt(btn.dataset.number)
        if (!current) return
        // if (btn.getAttribute('role') !== 'button') return
        if (status === 'cleared') return selectFirst(btn, current)
        if (status === 'first-selected-by-self') return selectSecond(btn, current)
        if (status === 'first-selected-by-startcal') return selectSecond(btn, current)
        if (status === 'first-selected-by-endcal') return selectSecond(btn, current)
        if (status === 'second-selected-by-self') return selectFirst(btn, current)
        if (status === 'second-selected-by-other') return selectFirst(btn, current)
    }

    function getSpaceInPrevMonth() {
        // get days in previous month
        var daysInPrevMonth = getDaysInMonth(new Date(year, count - 1))
        // get day in prev month which means to add how many spans
        var dayInPrevMonth = getDay(new Date(year, count-1, daysInPrevMonth))
        // generate span for prev month
        for (let s = dayInPrevMonth; s > 0; s-- ) {
            let span = bel`<div class=${css['day-prev']} role="presentation" aria-label aria-disabled="false"></div>`
            // span.classList.add(css['day-prev'])
            el.append(span)
        }
    }

    function makeCalendar() {
        for (let d = 1; d <= days; d++ ) {
            let date = format(new Date(year, count, d), 'd MMMM yyyy, EEEE')
            let setDate = format(new Date(year, count, d), 'yyyy-M-d')
            
            if (d < today && count <= new Date().getMonth() && year <= new Date().getFullYear() ) {
                var day = bel`<div role="button" class="${css['calendar-day']} ${css['disabled-day']}" tabindex="-1" aria-today=${is_today(d)} aria-label="${date}" data-date="${setDate}">${d}</div>`
            } else if ( count < new Date().getMonth() && year <= new Date().getFullYear() ) {
                var day = bel`<div role="button" class="${css['calendar-day']} ${css['disabled-day']}" tabindex="-1" aria-today=${is_today(d)} aria-label="${date}" data-date="${setDate}">${d}</div>`
            } else if ( year < new Date().getFullYear()) {
                var day = bel`<div role="button" class="${css['calendar-day']} ${css['disabled-day']}" tabindex="-1" aria-today=${is_today(d)} aria-label="${date}" data-date="${setDate}">${d}</div>`
            }
             else {
                var day = bel`<div role="button" class="${css['calendar-day']} ${is_today(d) ? `${css.today}` : ''}" tabindex="-1" aria-today=${is_today(d)} aria-label="${date}" aria-selected="${is_today(d)}" data-date="${setDate}" data-number="${d}">${d}</div>`
            }

            if (selectedDates !== void 0 && selectedDates.length > 0) {
                selectedDates.map( date => {
                    if ( date === setDate ) {
                        day.setAttribute('aria-selected', true)
                        day.classList.add(css['date-selected'])
                    }
                })
            }

            if (startDate !== void 0) {
                if ( startDate.date === setDate) {
                    day.setAttribute('aria-selected', true)
                    day.classList.add(css['date-selected'])
                }
            }

            if (endDate !== void 0) {
                if ( endDate.date === setDate) {
                    day.setAttribute('aria-selected', true)
                    day.classList.add(css['date-selected'])
                }

                // if select startDate is starting after current date then add style and attribute
                if (isAfter(new Date( endDate.year, endDate.count, endDate.day), new Date(year, count, d))) {
                        day.setAttribute('aria-selected', true)
                        day.classList.add(css['date-in-range'])
                        
                    // if select startDate is starting after current date then add style and attribute
                    if ( isAfter(new Date(year, count, d), new Date(startDate.year, startDate.count, startDate.day) )) {
                        day.setAttribute('aria-selected', true)
                        day.classList.add(css['date-in-range'])
                    } else {
                        day.setAttribute('aria-selected', false)
                        day.classList.remove(css['date-in-range'])
                    }
                } 
            }
            
            el.append(day)
        }
    }
}

const css = csjs`
.calendar-day {
    display: grid;
    align-items: center;
    justify-content: center;
    width: 30px;
    height: 30px;
    cursor: pointer;
    transition: color 0.25s, background-color 0.25s ease-in-out;
}
.calendar-day:focus, .calendar-day:active {
    outline: dotted 1px #c9c9c9;
}
.calendar-day:hover {
    color: #fff;
    background-color: #000;
}
.today {
    background-color: #f2f2f2;
}
.date-selected, .date-selected:hover {
    color: #fff;
    background-color: #000;
}
.date-in-range {
    color: #000;
    background-color: #EAEAEA;
}
.disabled-day {
    color: #BBBBBB;
    cursor: default;
}
.disabled-day:hover {
    color: #BBBBBB;
    background: none;
}
.day-prev {}
`