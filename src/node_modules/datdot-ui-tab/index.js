const bel = require(('bel'))
const csjs = require('csjs-inject')
const debug = require('debug')

module.exports = datdot_ui_tab

function datdot_ui_tab(opts) {
    const { page, arr, protocol } = opts
    const element = bel`
    <nav class=${css.tab}>
        ${arr.map( (name, index) => {
                if (index === 0) {
                    return bel`<button class="${css.btn} ${css.current}" onclick=${ (e) => onTrigger(e, name) }>${name}</button>`
                } else {
                    return bel`<button class=${css.btn} onclick=${ (e) => onTrigger(e, name) }>${name}</button>`
                }
            })
        }
    </nav>
    `

    return element

    function onTrigger(e, name) {
        const ui = 'ui-tab'
        const log = debug(page)
        const logger = log.extend(`${ui} > ${name}`)
        let message = { from: page, flow: ui, type: 'click', body: name, active: false}
        const el = e.target
        const childrens = [...element.children]

        if (el.classList.contains(css.current)) return
            // add the code below if want to display log on console
            // message.active = true

        childrens.forEach( btn => {
            btn.classList.remove(css.current)
            message.active = false
        })

        if ( el.innerText === name ) {
            el.classList.add(css.current)
            message.active = true
        }

        logger('send', message)
        return protocol(message)
    }

}

const css = csjs`
.tab {
    
}
.btn {
    color: ##000000;
    background-color: #d9d9d9;
    padding: 15px;
    border: none;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
    margin-right: 4px;
    outline: none;
    cursor: pointer;
    transition: background-color 0.3s ease-in-out;
}
.btn:hover {
    background-color: #afafaf;
}
.current, .current:hover {
    background-color: #fff;
}
`