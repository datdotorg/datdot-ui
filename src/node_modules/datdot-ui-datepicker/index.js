const bel = require('bel')
const csjs = require('csjs-inject')
const debug = require('debug')
const monthResult = require('month-result')
// widgets
const calendarDays = require('../datdot-ui-calendar-days')
const svg = require('svg')

module.exports = datepicker

function datepicker({name = 'ui-datepicker', month1, month2, status = 'cleared'}, protocol) {
    // @TODO: what is the real name?
    // * is it 'ui-calendar-days' ?
    // * or is it 'calendar' ?
    // * or is it maybe: 'calendar/ui-calendar-days' ???
    // * none of this answer, I would perfer called it datepicker as same as other plugins call
    const log = debug(name)
    log('ready')
    const sendToParent = protocol( receive )
    let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    let name1 = `${months[month1[0]]} ${month1[2]}`
    let name2 = `${months[month2[0]]} ${month2[2]}`
    const recipients = {}
    let value = {}
    let sendSubComponent, first, second
     // elements
    const cal1 = calendarDays({name: name1, month: month1[0], days: month1[1], year: month1[2], status }, calendarDaysProtocol)
    const cal2 = calendarDays({name: name2, month: month2[0], days: month2[1], year: month2[2], status }, calendarDaysProtocol)
    const iconPrev = svg( { css: `${css.icon} ${css['icon-prev']}`, path: './src/assets/arrow-left.svg' } )
    const iconNext = svg( { css: `${css.icon} ${css['icon-next']}`, path: './src/assets/arrow-right.svg' } )
    const prevMonth  = bel`<button role="button" aria-label="Previous month" class="${css.btn} ${css.prev}" onclick=${triggerPreviousMonth}>${iconPrev}</button>`
    const nextMonth = bel`<button role="button" aria-label="Next month" class="${css.btn} ${css.next}" onclick=${triggerNextMonth}>${iconNext}</button>`
    
    const weekList= ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    
    
    const element = bel`
    <div class=${css.datepicker}>
        <div class=${css["calendar-month"]}>${prevMonth}${nextMonth}</div>
        <div class=${css.calendar}>
            ${monthTitle(name1)}
            ${makeWeekDays()}
            ${cal1}
        </div>
        <div class=${css.calendar}>
            ${monthTitle(name2)}
            ${makeWeekDays()}
            ${cal2}
        </div>
        
    </div>`

    return element

    function monthTitle(name) {
        return bel`<h2 class=${css.title}>${name}</h2>`
    }

    function triggerPreviousMonth() {
        log('prev month');
    }
    function triggerNextMonth() {
        log('next month');
    }

    function makeWeekDays() {
        const el = bel`<section class=${css['calendar-weekday']} role="weekday"></section>`
        weekList.map( w => {
            let div = bel`<div class=${css['calendar-week']} role="week">${w.slice(0 ,1)}</div>`
            el.append(div)
        })
        return el
    }

    function calendarDaysProtocol(send) {
        sendSubComponent = send
        return receive
    }

    function receive( message ) {
        const {from, type, body} = message
        log(`<= ${type} <= ${from}`) 
        if (type === 'init') return storeSendFN(from, sendSubComponent)
        if (type === 'value/first') return notifyAndStoreFirst(from, body)
        if (type === 'value/second') return notifyParent(from, body)
        if (type === 'selecting-second') return notifyOtherCalenderSelectingLast(from)
        if (type === 'cleared') return clearOther( from === name1 ? name2 : name1)
        else return forwardMessage(from, message)
    }

    function filterOutRecipients(list) {
        const receivers = Object.keys(recipients)
                               .filter( name => !list.includes(name))
                               .map(name => recipients[name])
        return receivers
    }

    function forwardMessage(from, message) {
        const list = [from]
        const receivers = filterOutRecipients(list)
        broadcast(receivers, message)
    }

    function clearOther(from) {
        const send = recipients[from]
        return send({ from: name, type: 'clear'})
    }

    function notifyParent(from, body) {
        value.second = body
        const message = {from: name, type: 'value', body: value} 
        log(`notify parent: ${name} ${body}`)
        sendToParent({from, flow: name, type:'value/second', body})
        return sendToParent(message)
    }

    function notifyOtherCalenderSelectingLast(from) {
        if (from === name1) {
            const send = recipients[name2]
            const message  = {from: name, type: 'color-from-start'}
            log(message)
            return send( message )
        }

        if (from === name2) {
            const send = recipients[name1]
            const message = {from: name, type: 'color-to-end'}
            log(message)
            return send(message)
        }
    }
    
    function notifyAndStoreFirst(from, body) {
        value.first = body
        const list = [from]
        const receivers = filterOutRcipients(list)
        const type = from === name1 ? 'first-selected-by-startcal' : 'first-selected-by-endcal'
        sendToParent({from, flow: name, type: 'value/first', body})
        return broadcast( receivers, {from: name, type}) 
    }

    function storeSendFN(from, send) {
        recipients[from] = send
    }

    function filterOutRcipients(list) {
        const receivers = Object.keys(recipients)
                                .filter( name => !list.includes(name))
                                .map( name => recipients[name])
        return receivers
    }

    function broadcast(receivers, message) {
        const {from, type, body} = message
        for ( let i = 0, len = receivers.length; i < len; i++) {
            const send = receivers[i]
            log('boradcast =>', `${body} => ${from}`)
            send(message)
        }
    }

}


const css = csjs`
.datepicker {
    position: relative;
    display: flex;
    max-width: 510px;
}
.datepicker-body {
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: repeat(2, 210px);
    grid-gap: 35px;
}
.btn {
    background: none;
    border: none;
    border-radius: 50px;
    width: 30px;
    height: 30px;
    padding: 0;
    transition: background-color 0.3s ease-in-out;
    cursor: pointer;
}
.btn:active, .btn:hover {
    background-color: #C9C9C9;
}
.prev {}
.next {}
.icon svg path {
    transition: stroke 0.25s ease-in-out;
}
.icon-prev {}
.icon-next {}
.calendar-month {
    position: absolute;
    z-index: 9;
    top: 8px;
    display: flex;
    justify-content: space-between;
    width: 100%;
}
.calendar-weekday {
    display: grid;
    grid-template-rows: 30px;
    grid-template-columns: repeat(7, minmax(30px, auto));
    justify-items: center;
    font-size: 12px;
}
.calendar-week {
    
}
.calendar {
    margin-left: 30px;
}
.title {
    font-size: 18px;
    text-align: center;
}
`