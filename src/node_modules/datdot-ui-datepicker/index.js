const debug = require('debug')
const bel = require('bel')
const csjs = require('csjs-inject')
const { format, getMonth, getYear, getDaysInMonth, isBefore, isAfter } = require('date-fns')
const monthResult = require('month-result')
// widgets
const calendarDays = require('../datdot-ui-calendar-days')
const calendarMonth = require('../datdot-ui-calendar-month')
const svg = require('svg')
module.exports = datepicker

function datepicker(protocol) {
    // init
    let ui = 'ui-datepicker'
    const log = debug(ui)
    let mode = 'datepicker-range-days' // datepicker-multiple-days, datepicker-range-days, datepicker-repeat
    let data = {
        status: 'unselected',
        type: 'init',
        startDate: {
            from: null,
            date: null
        },
        endDate: {
            from: null,
            date: null
        }
    }
    let daterangepicker = window.sessionStorage
    daterangepicker.setItem('datepicker', JSON.stringify(data))
    let datepicker = JSON.parse(daterangepicker.getItem('datepicker'))
    let status = datepicker.status
    let type = datepicker.type
    let selectedDates = []
    let startDate, endDate
    // date init
    let date = new Date()
    let year = getYear(date)
    let count = getMonth(date)
    let nextCount = getMonth( new Date(year, count+1) )
    let currentMonth = format( new Date(year, count), 'MMMM')
    let nextMonth = format( new Date(year, count+1), 'MMMM')
    let daysInCurrnetMonth = getDaysInMonth( new Date(year, count))
    let daysInNextMonth = getDaysInMonth( new Date( year, count+1))
    // render calendar
    let cal1 = calendar({name: `${currentMonth} ${year}`, mode, status, type, data: {from: ui, count, month: currentMonth, year, days: daysInCurrnetMonth}}, calendarProtocol)
    let cal2 = calendar({name: `${nextMonth} ${year}`, mode, status, type, data: {from: ui, count: nextCount, month: nextMonth, year, days: daysInNextMonth}}, calendarProtocol)
    
    // elements
    const iconPrev = svg( { css: `${css.icon} ${css['icon-prev']}`, path: './src/node_modules/assets/arrow-left.svg' } )
    const iconNext = svg( { css: `${css.icon} ${css['icon-next']}`, path: './src/node_modules/assets/arrow-right.svg' } )
    const prevButton  = bel`<button role="button" aria-label="Previous month" class="${css.btn} ${css.prev}" onclick=${()=>triggle(prevButton)}>${iconPrev}</button>`
    const nextButton = bel`<button role="button" aria-label="Next month" class="${css.btn} ${css.next}" onclick=${()=>triggle(nextButton)}>${iconNext}</button>`
    const calendarsDisplay = bel`<div class=${css['datepicker-body']}></div>`
    calendarsDisplay.append(cal1, cal2)
    const el = bel`<section class=${css.datepicker}>${prevButton}${calendarsDisplay}${nextButton}</section>`

    return el

    function calendar({page = 'calendar', name, mode, type, status, selectedDates, selectRangeDates, data}, protocol) {
        const logger = log.extend('calendar')
        // logger(`${name} is ready, calendar status: ${status}`);
        const { from = page, count, month, year, days } = data
        let header = calendarMonth({page: ui, getDate: new Date(year, count), mode}, calendarMonthProtocol)
        let tableDays = bel`<div class=${css['calendar-table-days']}>${calendarDays( {page, name, mode, type, status, style: `${css['calendar-days']}`, data, selectedDates, startDate, endDate}, protocol ) }</div>`
        const weekday = bel`<section class=${css['calendar-weekday']} role="weekday"></section>`
        const weekList= ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        weekList.map( w => {
            const div = bel`<div class=${css['calendar-week']} role="week">${w.slice(0 ,1)}</div>`
            weekday.append(div)
        })

        const el = bel`
        <div class=${css.calendar}>
            ${header}
            <div class=${css['calendar-section']}>
            ${weekday}
            ${tableDays}
            </div>
        </div>`

        return el
    }


    function calendarMonthProtocol(message) {
        protocol(message)
    }

    function calendarProtocol(send) {
        return (message) => {
            if (mode === 'datepicker-multiple-days') return multipleDaysProtocol(message)
            if (mode === 'datepicker-range-days') return selectRangeDaysProtocol(message, send)
        }
    }

    function selectRangeDaysProtocol(message, send) {
        const { from, type, body } = message
        const logger = log.extend('calendar')
        // const { from, type, body, day, count, year } = message
        // console.log(ui, 'receive', `${from} type: ${type}` );

        // console.log('currentStatus', currentStatus );
        // console.log( 'selected date', message)

        // if ( startDate !== void 0 && endDate === void 0 ) {
        //     let selectSecond = { year, count, day, date: body }
        //     if ( isAfter( new Date(year, count, day), new Date( startDate.year, startDate.count, startDate.day) ) )  {
        //         endDate = selectSecond
        //     } else {
        //         endDate = Object.assign({}, startDate)
        //         startDate = selectSecond
        //     }
        //     // console.log('parent protocol recevie: second clicked')
        //     // console.log('start', startDate.date, 'to', endDate.date )
        // } else {
        //     startDate = { year, count, day, date: body }
        //     endDate = void 0
        //     // console.log('parent protocol recevie: first clicked');
        //     // console.log('start', startDate.date, 'to', endDate)
        // }
      
        if (type === 'init') return logger(`${from} is ready`)
        if (type === 'value/start') return notifyAndStoreFirst( message )
        if (type === 'value/end') return notifyAndStoreLast(message)
        if (type === 'selecting-second') return notifyOther(message, send)
        send(message)
    }

    function notifyOther(message, send) {
        const { sender, status, type, body, day, count, year } = message
        datepicker.status = status
        datepicker.type = type
        daterangepicker.setItem('datepicker', JSON.stringify(datepicker))
        log('notifyOther received', message)
        log('daterangepicker', JSON.parse( daterangepicker.getItem('datepicker') ) )
        send( message )
    }

    function notifyAndStoreLast (message) {
        const { sender, currentStatus: status, type, body, day, count, year } = message
        start = {sender: startDate.sender, year: startDate.year, count: startDate.count, day: startDate.day, date: startDate.date}
        end = {sender, year, count, day, date: body }

        if ( start.year > end.year) {
            return updateSelectDates(status, type, end, start)
        } else {
            if ( start.year === end.year ) {
                if ( start.count > end.count) {
                    return updateSelectDates(status, type, end, start)
                } else {
                    if ( start.day <= end.day ) return updateSelectDates(status, type, start, end)
                    else return updateSelectDates(status, type, end, start)
                }
            } else {
                return updateSelectDates(status, type, start, end)
            }
        }
    }

    function updateSelectDates(status, type, start, end) {
        startDate = start
        endDate = end
        datepicker.status = status
        datepicker.type = type
        datepicker.startDate = { from: start.sender, date: start.date }
        datepicker.endDate = end === void 0 ? null : { from: end.sender, date: end.date }
        daterangepicker.setItem('datepicker', JSON.stringify(datepicker))
        log('update startDate', startDate ); // {sender: "October 2020", year: 2020, count: 9, day: "20", date: "2020-10-20"}
        log('daterangepicker', JSON.parse( daterangepicker.getItem('datepicker')) );
    }

    function notifyAndStoreFirst(message) {
        const { sender, currentStatus: status, type, body, day, count, year } = message
        start = {sender, year, count, day, date: body }
        updateSelectDates(status, type, start)
    }

    function multipleDaysProtocol(message) {
        const { body } = message
        // if not found date in selectedDates then push body
        if ( selectedDates.indexOf( body ) === -1) selectedDates.push(body)
        else selectedDates.splice(selectedDates.indexOf( body ), 1)
        // change status
        if ( selectedDates.length === 0) setStatus('unselected')
        if ( selectedDates.length > 0) setStatus('selected-dates')
        // console.log(selectedDates);
        return protocol(message)
    }

    function triggle(target) {
        if (target.classList.contains(css.prev)) {
            // decreemnt 2 months
            nextCount = count - 1
            count -= 2
        } else {
            // incremenet 2 months
            count += 2
            nextCount = count+1
        }
        let month1 = monthResult(count)
        let month2 = monthResult(nextCount)
        let updateCal1 = calendarRender({name: `${month1.month} ${month1.year}`, mode, type, ...month1, selectedDates, startDate, endDate})
        let updateCal2 = calendarRender({name: `${month2.month} ${month2.year}`, mode, type, ...month2, selectedDates, startDate, endDate})
        calendarsDisplay.innerHTML = ''
        calendarsDisplay.append(updateCal1, updateCal2)
    }

    function calendarRender({name, mode, type, count, year, month, days, selectedDates, startDate, endDate}) {
        return calendar({page: ui, name, mode, type, status, data: {from: ui, count, month, year, days}, selectedDates, startDate, endDate}, calendarProtocol)
    }
}

const css = csjs`
.datepicker {
    display: flex;
}
.datepicker-body {
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: repeat(2, 210px);
    grid-gap: 35px;
}
.calendar {}
.calendarHeader {}
.calendar-weekday {
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: repeat(7, minmax(30px, auto));
    justify-items: center;
}
.calendar-week {}
.calendar-table-days {}
.calendar-days {
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: repeat(7, minmax(30px, auto));
    justify-items: center;
}
.calendar-section {
    font-size: 12px;
}
.btn {
    background: none;
    border: none;
    border-radius: 50px;
    width: 30px;
    height: 30px;
    padding: 0;
    transition: background-color 0.3s ease-in-out;
    cursor: pointer;
}
.btn:active, .btn:hover {
    background-color: #C9C9C9;
}
.btn:active div > svg path, .btn:hover div > svg path {}
.prev {}
.next {}
.icon svg path {
    transition: stroke 0.25s ease-in-out;
}
.icon-prev {}
.icon-next {}
.date-selected-range {
    background-color: #EAEAEA;
}
`