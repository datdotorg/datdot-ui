const debug = require('debug')
const bel = require('bel')
const csjs = require('csjs-inject')
const { format, getMonth, getYear } = require('date-fns')
const monthResult = require('month-result')
const svg = require('svg')
module.exports = datdot_ui_calendar_month

function datdot_ui_calendar_month({page, getDate, type = 'click', mode = void 0}, protocol) {
    const ui = 'ui-calendar-month'
    const log = debug(page)
    const logger = log.extend(`${ui} >`)
    const date = getDate || new Date()
    let year = getYear( date )
    let current = getMonth( date )
    // get Capital month
    let month = format( new Date(year, current), 'MMMM')
    let message

    // elements
    const title = bel`<h3 class=${css.title}>${month} ${year}</h3>`
    const iconPrev = svg( { css: `${css.icon} ${css['icon-prev']}`, path: './src/node_modules/assets/arrow-left.svg' } )
    const iconNext = svg( { css: `${css.icon} ${css['icon-next']}`, path: './src/node_modules/assets/arrow-right.svg' } )
    const prev  = bel`<button role="button" aria-label="Previous month" class="${css.btn} ${css.prev}" onclick=${()=>trigger(prev)}>${iconPrev}</button>`
    const next = bel`<button role="button" aria-label="Next month" class="${css.btn} ${css.next}" onclick=${()=>trigger(next)}>${iconNext}</button>`

    if ( mode === 'datepicker-multiple-days' || mode === 'datepicker-range-days') {
        var el = bel`<div class=${css["datepicker-header"]}>${title}</div>`
    } else {
        var el = bel`<div class=${css["calendar-header"]}>${prev}${title}${next}</div>`
    }
    return el

    function updateMonth(m, y) {
        return title.innerHTML = `${m} ${y}`
    }

    function trigger(target) {
        if (target.classList.contains(css.prev)) {
            var body = 'prev month'
            // decrement month
            current -= 1
        } else {
            var body = 'next month'
            // increment month
            current += 1
        }

        let result = monthResult(current)
        let { count, year, month, days} = result

        updateMonth(month, year)
        logger(body, count, type, `${month} ${year}, ${days} days`)
       
        // send message to parent component
        message = { from: page, flow: ui, type, mode, body, ...result}
        logger(message.body, 'send', message)
        return protocol(message)
    } 
}

const css = csjs`
.calendar-header {
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: minmax(25px, 30px) auto minmax(25px, 30px);
    align-items: center;
}
.datepicker-header {
    display: grid;
    grid-template-rows: 30px;
    grid-template-columns: auto;
    align-items: center;
    margin-bottom: 12px;
}
.datepicker-header > h3 {
    margin: 0;
}
.btn {
    background: none;
    border: none;
    border-radius: 50px;
    width: 30px;
    height: 30px;
    padding: 0;
    transition: background-color 0.3s ease-in-out;
    cursor: pointer;
}
.btn:active, .btn:hover {
    background-color: #C9C9C9;
}
.btn:active div > svg path, .btn:hover div > svg path {
    
}
.prev {

}
.next {

}
.icon svg path {
    transition: stroke 0.25s ease-in-out;
}
.icon-prev {

}
.icon-next {

}
.title {
    text-align: center;
}
`