const debug = require('debug')
const bel = require('bel')
const csjs = require('csjs-inject')
const { format, getMonth, getYear, getDaysInMonth, setMonth } = require('date-fns')
const svg = require('svg')
module.exports = datdot_ui_calendar_month

function datdot_ui_calendar_month({page, getDate}, protocol) {
    const ui = 'ui-calendar-month'
    const log = debug(page)
    const logger = log.extend(`${ui} >`)
    const date = getDate || new Date()
    let year = getYear( date )
    let current = getMonth( date )
    // get Capital month
    let month = format( new Date(year, current), 'MMMM')
    let message, days

    // elements
    const title = bel`<h3 class=${css.title}>${month} ${year}</h3>`
    const prev = svg( { css: `${css.icon} ${css['icon-prev']}`, path: './src/node_modules/assets/arrow-left.svg' } )
    const next = svg( { css: `${css.icon} ${css['icon-next']}`, path: './src/node_modules/assets/arrow-right.svg' } )

    const element = bel`
    <div class=${css["calendar-header"]}>
        <button role="button" aria-label="Previous month" class="${css.btn} ${css.prev}" onclick=${ () => prevTrigger()}>${prev}</button>
        ${title}
        <button role="button" aria-label="Next month" class="${css.btn} ${css.next}" onclick=${ () => nextTrigger()}>${next}</button>
    </div>
    `

    return element

    function updateMonth(m, y) {
        return title.innerHTML = `${m} ${y}`
    }

    function prevTrigger() {
        // decrement year
        let previMonth = setMonth(date, current - 1 )
        current -= 1
        
        let m = getMonth( previMonth )
        console.log('m', m);
        let y = getYear( previMonth )
        let month = format( new Date(year, m), 'MMMM')
        let days = getDaysInMonth(previMonth)
        // console.log(m + 1, y,  `${days} days`);
        updateMonth(month, y)

        logger('prev month', m, `${month} ${y}, ${days} days`)

        // send message to parent component
        message = { from: page, flow: ui, type: 'click', body: 'prev month', count: m, month, year: y, days}
        logger(message.body, 'send', message)

        return protocol(message)
    }
    
    function nextTrigger() {
        // increment month
        let nextMonth = setMonth( new Date(), current + 1 )
        current += 1

        let m = nextMonth.getMonth()
        let y = nextMonth.getFullYear()
        let month = format( new Date(y, m), 'MMMM')
        let days = getDaysInMonth(nextMonth)
        // console.log(m + 1, y, `${days} days`);
        updateMonth(month, y)
        logger('next update', m, `${month} ${y}, ${days} days`)
        
        // send message to parent component
        message = { from: page, flow: ui, type: 'click', body: 'next month', count: m, month, year: y, days}
        logger(message.body, 'send', message)

        return protocol(message)
    }
}

const css = csjs`
.calendar-header {
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: minmax(25px, 30px) auto minmax(25px, 30px);
    align-items: center;
}
.btn {
    background: none;
    border: none;
    border-radius: 50px;
    width: 30px;
    height: 30px;
    padding: 0;
    outline: none;
    transition: background-color 0.3s ease-in-out;
}
.btn:active, .btn:hover {
    background-color: #C9C9C9;
}
.btn:active div > svg path, .btn:hover div > svg path {
    
}

.prev {

}
.next {

}
.icon svg path {
    transition: stroke 0.25s ease-in-out;
}
.icon-prev {

}
.icon-next {

}
.title {
    text-align: center;
}
`